	EXPORT FIREDORTIRED
	IMPORT GPIO_INIT
	IMPORT TFT_Init
	IMPORT DrawRect
	IMPORT Draw_Ball
	IMPORT delay
	IMPORT DIV
	IMPORT COLOR_GREEN
	IMPORT SCORE_INIT
	IMPORT IncrementScore
	IMPORT TFT_FillScreen
	IMPORT Get_Random_Seed
	IMPORT WIN
	IMPORT LOSE
	IMPORT ONEWIN
	IMPORT TWOWIN
	IMPORT SET_SCORE
	IMPORT IMAGE1
	IMPORT IMAGE2
	IMPORT TFT_DrawImage
	IMPORT COLOR_RED
	IMPORT CLEAR_COLOR
		
	AREA MYDATA, DATA, READWRITE
; Variables of The Games
PLAYER1 DCD 0xFFFFFFFF ; (0xXXXXYYYY) (Player on the Right)
PLAYER1_STATE DCD 0xFFFFFFFF ; State of Player 1 (0 : Idle, 1 : Jump, 2 : Right, 3 : Left, 4 : Fall)
PLAYER2 DCD 0xFFFFFFFF ; (0xXXXXYYYY) (Player on the Left)
PLAYER2_STATE DCD 0xFFFFFFFF ; State of Player 1 (0 : Idle, 1 : Jump, 2 : Right, 3 : Left, 4 : Fall)		
PLAYER_WIDTH EQU 25
PLAYER_HEIGHT EQU 25
PLAYER1_HEALTH DCD 100 ; Health of Player
PLAYER1_SCORE DCD 0 ; Score of Player
PLAYER2_HEALTH DCD 100 ; Health of Player
PLAYER2_SCORE DCD 0	 ; Score of Player
GRAVITY EQU 3 ; When Falling Decrement Gravity
PLAYER_SPEED EQU 5 ; Player Speed
JUMP_STRENGTH EQU 40 ; When Jump Increment Strength
BULLETS1 SPACE 80 ; 4 * 20 Bullets from Player 1 Per Player (0xXXXXYYYY)
BULLETS2 SPACE 80 ; 4 * 20 Bullets from Player 2 Per Player (0xXXXXYYYY)
BULLET_SPEED EQU 5
RODS DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF ;(0xXXXXYYYY) of Center of Rod and the Length is Constant
RODS_LENGTH DCD 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF ;(0xXXXXYYYY) of Center of Rod and the Length is Constant
RODS_HEIGHT EQU 4 ; Half of the Height which is 8 px
BORDERS EQU 5 ; Borders from All Direction
HEARTS
;COLOURS
BLACK EQU 0X0000
BLUE EQU 0x001F
WHITE EQU 0XFFFF
PINK EQU 0xc814
GREEN EQU 0x0780
CYAN EQU 0x05b9
RED	EQU 0xf800
YELLOW	EQU 0xffc0
ORANGE EQU	0xfc40
BROWN EQU 0x89a0

;Define register base addresses
RCC_BASE        EQU     0x40023800
GPIOA_BASE      EQU     0x40020000
GPIOB_BASE		EQU		0x40020400
GPIOC_BASE		EQU		0x40020800
GPIOD_BASE		EQU		0x40020C00
GPIOE_BASE		EQU		0x40021000

;Define register offsets
RCC_AHB1ENR     EQU     0x30
GPIO_MODER      EQU     0x00
GPIO_OTYPER     EQU     0x04
GPIO_OSPEEDR    EQU     0x08
GPIO_PUPDR      EQU     0x0C
GPIO_IDR        EQU     0x10
GPIO_ODR        EQU     0x14

;Control Pins on Port E
TFT_RST         EQU     (1 << 8)
TFT_RD          EQU     (1 << 10)
TFT_WR          EQU     (1 << 11)
TFT_DC          EQU     (1 << 12)
TFT_CS          EQU     (1 << 15)

DELAY_INTERVAL  EQU     0x18604  

    AREA RESET, CODE, READONLY
FIREDORTIRED
	PUSH {R0-R12, LR}
	BL GAME_INIT
	BL DrawBackground
FIREDORTIREDLOOP
	BL CHECKENDGAME
	BL CheckFalling ; Decrement User
	BL READ_INPUTS
	BL MOVE_PLAYER1
	BL MOVE_PLAYER2
	;BL MOVE_BULLETS
	BL DrawRods
	BL DrawPlayers
	MOV R5, #0xFFFFFFFF ; To Not Blink Score and Health
	BL UPDATE_HEALTH
	BL UPDATE_SCORE
	B FIREDORTIREDLOOP
	POP {R0-R12, PC}
DrawRods    
    PUSH {R0-R12, LR}
    LDR R0,=RODS
      ;R0-> RODS CENTER(0XXXXXYYYY)
     
    LDR R1,=RODS_LENGTH  
      ;R1-> ROD LENGTH
    
    MOV R3,#0   ;INDEX
RODSLOOP
    LDR R2,[R0,R3]  ;ROD'S CENTER     
    LSR R11, R2,#16  ;ROD X CENTER
    LDR R12,[R1,R3]  ;HALF LENGTH OF ROD
    
    SUB R6,R11,R12
    ADD R8,R11,R12
	

    MOV R4,#0x0000FFFF
	AND R5, R2, R4
    SUB R7,R5,#RODS_HEIGHT
    ADD R9,R5,#RODS_HEIGHT
    MOV R10,#GREEN
    BL DrawRect
    ADD R3,R3,#4

    CMP R3,#16
    BLE RODSLOOP


    

    POP {R0-R12, PC}
	LTORG	
DrawPlayers    
    PUSH {R0-R12, LR}
    LDR R0,=PLAYER1
    LDR R6,[R0]  ; PLAYER CENTER 0xXXXXYYYY

    LSR R1,R6,#16
    SUB R1,R1,#PLAYER_WIDTH

    MOV R4,#0x0000FFFF
    AND R2,R6,R4  ;Y
    SUB R2,R2,#PLAYER_HEIGHT
    LDR R3,=IMAGE1
    BL TFT_DrawImage
    LDR R0,=PLAYER2
    LDR R6,[R0]  ; PLAYER CENTER 0xXXXXYYYY

    LSR R1,R6,#16
    SUB R1,R1,#PLAYER_WIDTH

    MOV R4,#0x0000FFFF
    AND R2,R6,R4  ;Y
    SUB R2,R2,#PLAYER_HEIGHT
    LDR R3,=IMAGE2
	BL TFT_DrawImage
    POP {R0-R12, PC}
	LTORG	
GAME_INIT
	PUSH {R0-R12, LR}
	LDR R0, =RODS ; Center of Rod	
	LDR R1, =RODS_LENGTH ; Rod Length
	; Rod 1 from 40 to 200
	MOV R2, #120 ; X of Bar
	MOV R3, #80 ; Y of Bar
	MOV R4, #0x0000FFFF ; Temp Variable
	AND R3, R3, R4 ; R3 = 0x0000YYYY
	LSL R2, R2, #16 ; R2 = 0xXXXX0000
	ORR R4, R2, R3 ; R5 = 0xXXXXYYYY
	STR R4, [R0], #4
	MOV R4, #80 ; Half of Length of Bar
	STR R4, [R1], #4
	; Rod 2 from 300 to 480
	MOV R2, #360 ; X of Bar
	MOV R3, #80 ; Y of Bar
	MOV R4, #0x0000FFFF ; Temp Variable
	AND R3, R3, R4 ; R3 = 0x0000YYYY
	LSL R2, R2, #16 ; R2 = 0xXXXX0000
	ORR R4, R2, R3 ; R5 = 0xXXXXYYYY
	STR R4, [R0], #4
	MOV R4, #80 ; Half of Length of Bar
	STR R4, [R1], #4
	; Rod 3 from 100 to 380
	MOV R2, #240 ; X of Bar
	MOV R3, #160 ; Y of Bar
	MOV R4, #0x0000FFFF ; Temp Variable
	AND R3, R3, R4 ; R3 = 0x0000YYYY
	LSL R2, R2, #16 ; R2 = 0xXXXX0000
	ORR R4, R2, R3 ; R5 = 0xXXXXYYYY
	STR R4, [R0], #4
	MOV R4, #140 ; Half of Length of Bar
	STR R4, [R1], #4
	; Rod 4 from 40 to 200
	MOV R2, #120 ; X of Bar
	MOV R3, #240 ; Y of Bar
	MOV R4, #0x0000FFFF ; Temp Variable
	AND R3, R3, R4 ; R3 = 0x0000YYYY
	LSL R2, R2, #16 ; R2 = 0xXXXX0000
	ORR R4, R2, R3 ; R5 = 0xXXXXYYYY
	STR R4, [R0], #4
	MOV R4, #80 ; Half of Length of Bar
	STR R4, [R1], #4
	; Rod 5 from 240 to 400
	MOV R2, #360 ; X of Bar
	MOV R3, #240 ; Y of Bar
	MOV R4, #0x0000FFFF ; Temp Variable
	AND R3, R3, R4 ; R3 = 0x0000YYYY
	LSL R2, R2, #16 ; R2 = 0xXXXX0000
	ORR R4, R2, R3 ; R5 = 0xXXXXYYYY
	STR R4, [R0], #4
	MOV R4, #80 ; Half of Length of Bar
	STR R4, [R1], #4
	
	; Bullets
	LDR R0, =BULLETS1
	LDR R1, =0xFFFFFFFF
	MOV R2, #20
INITBULLETS1LOOP
	CMP R2, #0
	BLE INITBULLETS1LOOPFINISHED
	SUB R2, R2, #1
	STR R1, [R0], #4
INITBULLETS1LOOPFINISHED

	LDR R0, =BULLETS2
	LDR R1, =0xFFFFFFFF
	MOV R2, #20
INITBULLETS2LOOP
	CMP R2, #0
	BLE INITBULLETS2LOOPFINISHED
	SUB R2, R2, #1
	STR R1, [R0], #4
INITBULLETS2LOOPFINISHED
	; Initializing Player 1
	LDR R0, =PLAYER1
	LDR R1, =PLAYER1_STATE
	MOV R2, #360 ; X of Player 1
	MOV R3, #75 
	SUB R3, R3, #10
	SUB R3, R3, #RODS_HEIGHT
	SUB R3, R3, #PLAYER_HEIGHT ; R3 = Y of Player
	LSL R2, R2, #16 ; R2 = 0xXXXX0000
	MOV R4, #0x0000FFFF
	AND R3, R3, R4 ; R3 = 0x0000YYYY
	ORR R4, R2, R3 ; R4 = 0xXXXXYYYY
	STR R4, [R0]
	MOV R4, #0
	STR R4, [R1]
	LDR R0, =PLAYER1_HEALTH
	MOV R1, #100
	STR R1, [R0]
	LDR R0, =PLAYER1_SCORE
	MOV R1, #0
	STR R1, [R0]
	; Initializing Player 2
	LDR R0, =PLAYER2
	LDR R1, =PLAYER2_STATE
	MOV R2, #120 ; X of Player 2s
	MOV R3, #75
	SUB R3, R3, #10
	SUB R3, R3, #RODS_HEIGHT
	SUB R3, R3, #PLAYER_HEIGHT ; R3 = Y of Player
	LSL R2, R2, #16 ; R2 = 0xXXXX0000
	MOV R4, #0x0000FFFF
	AND R3, R3, R4 ; R3 = 0x0000YYYY
	ORR R4, R2, R3 ; R4 = 0xXXXXYYYY
	STR R4, [R0]
	MOV R4, #0
	STR R4, [R1]
	LDR R0, =PLAYER2_HEALTH
	MOV R1, #100
	STR R1, [R0]
	LDR R0, =PLAYER2_SCORE
	MOV R1, #0
	STR R1, [R0]
	POP {R0-R12, PC}
	LTORG
DrawBackground
    PUSH {R0-R12, LR}
    MOV R6,#0
    MOV R7,#0
    MOV R8,#480
    MOV R9,#320
    MOV R10,#CYAN
    BL DrawRect
;TOPBORDERLOOP
;    
;    MOV R7,#0
;    ADD R8,R6,#5
;    MOV R9,#9
;    MOV R10,#RED
;    BL DrawRect
;    ADD R6,R6,#10
;    MOV R11,#479
;    CMP R6,R11
;    BLT TOPBORDERLOOP
    MOV R6,#0
BOTTOMBORDERLOOP
    
    MOV R7,#310
    ADD R8,R6,#5
    MOV R9,#319
    MOV R10,#RED
    BL DrawRect
    ADD R6,R6,#10
    MOV R11,#479
    CMP R6,R11
    BLT BOTTOMBORDERLOOP
    MOV R7,#10    
LEFTBORDERLOOP
    MOV R6,#0
    MOV R8,#9
    ADD R9,R7,#5
    
    BL DrawRect
    ADD R7,R7,#10
    MOV R11,#310
    CMP R7,R11
    BLT LEFTBORDERLOOP
    MOV R7,#10    
RIGHTBORDERLOOP
    MOV R6,#470
    MOV R8,#479
    ADD R9,R7,#5
    BL DrawRect
    ADD R7,R7,#10
    MOV R11,#310
    CMP R7,R11
    BLT RIGHTBORDERLOOP    
    
    POP {R0-R12, PC}
	LTORG
	
	
	
CHECKENDGAME
    PUSH {R0-R12, LR}
    LDR R0, =PLAYER1_HEALTH 
    LDR R0, [R0]
    CMP R0, #0
	BLEQ TFT_FillScreen
    BLEQ TWOWIN
	BEQ CHECKENDGAME
    LDR R0, =PLAYER2_HEALTH 
    LDR R0, [R0]
    CMP R0, #0
	BLEQ TFT_FillScreen
    BLEQ ONEWIN
	BEQ CHECKENDGAME
    
    LDR R0, =PLAYER1 
    LDR R0, [R0]
    LSR R1, R0, #16;X
    LDR R12, =0xFFFF
    AND R2, R0, R12;Y
    
    MOV R4, #480
    SUB R3, R4, #BORDERS 
    CMP R1, R3
	BLEQ TFT_FillScreen
    BLEQ TWOWIN
	BEQ CHECKENDGAME
    
    MOV R4, #BORDERS 
    CMP R1, R4
	BLEQ TFT_FillScreen
    BLEQ TWOWIN
	BEQ CHECKENDGAME
    
    MOV R3, #320
    SUB R3, R3, #BORDERS 
    CMP R2, R3
	BLEQ TFT_FillScreen
    BLEQ TWOWIN
	BEQ CHECKENDGAME


    ;============================
    MOV R0, #0
    MOV R1, #0
    MOV R2, #0
    MOV R3, #0
    MOV R4, #0
    ;ZEROFY THEM CAUTIOUSLY
    LDR R0, =PLAYER2
    LDR R0, [R0]
    LSR R1, R0, #16;X
    LDR R12, =0xFFFF
    AND R2, R0, R12;Y
    
    MOV R4, #480
    SUB R3, R4, #BORDERS 
    CMP R1, R3
	BLEQ TFT_FillScreen
    BLEQ ONEWIN
	BEQ CHECKENDGAME
    
    MOV R4, #BORDERS 
    CMP R1, R4
	BLEQ TFT_FillScreen
    BLEQ ONEWIN
	BEQ CHECKENDGAME
    
    MOV R3, #320
    SUB R3, R3, #BORDERS 
    CMP R2, R3
	BLEQ TFT_FillScreen
    BLEQ ONEWIN
	BEQ CHECKENDGAME
    
    
    POP {R0-R12, PC}
	LTORG
HIT_PLAYER1
    PUSH {R0-R12, LR}
   ; BL REMOVE_BULLET
    LDR R0,=PLAYER1_HEALTH
    LDR R1,[R0]
    SUB R1,R1,#5
    STR R1,[R0]
    
    LDR R0,=PLAYER2_SCORE
    LDR R1,[R0]
    ADD R1,R1,#1
    STR R1,[R0]


    POP {R0-R12, PC}
    LTORG

HIT_PLAYER2
    PUSH {R0-R12, LR}
   ; BL REMOVE_BULLET
    LDR R0,=PLAYER2_HEALTH
    LDR R1,[R0]
    SUB R1,R1,#5
    STR R1,[R0]
    
    LDR R0,=PLAYER1_SCORE
    LDR R1,[R0]
    ADD R1,R1,#1
    STR R1,[R0]


    POP {R0-R12, PC}
    LTORG	
;RETURN IN R10(0, 1)
CHECKCOLLISION1
	PUSH {R0-R9,R11-R12, LR} 
	;HOLDS THE CENTER OF THE RODS AND THE LENGTH IS CONSTANT 
	;THE HEIGHT(HALF) IS 4PX AND THE PLAYERS ARE 2PX ABOVE THE RODS
	LDR R0, =RODS
	LDR R1, =RODS_LENGTH 
	LDR R8, =PLAYER1
	LDR R8, [R8]
	LSR R7, R8, #16 ;X OF THE PLAYER
	MOV R12, #0x0000FFFF
	AND R9, R12, R8;Y OF THE PLAYER
	ADD R9, R9, #PLAYER_HEIGHT ;HALF THE PL LENGTH
	MOV R6, #0 ;TRAVERSING REG
	MOV R10, #0 ; Default
	LDR R2, [R1]
	CMP R2, #0
	BEQ CHECKFINISHED1
	CMP R2, #1
	BEQ CHECKFINISHED1
CHECKLOOP1
	CMP R6, #6
	BGE CHECKFINISHED1
	ADD R6, R6, #1

	LDR R4, [R0]
	LDR R5, [R1]	;THE  LENGTH
	MOV R12, #0XFFFF
	LSR R2, R4, #16  ;THE CENTER X
	AND R3, R4, R12  ;THE CENTER Y
	
	SUB R12,R3, #RODS_HEIGHT ;SUB THE HALF HEIGHT 
	SUB R12, #2 ;ADD THE EXTRA 2PX FOR THE PLAYER STANDING PADDING
	
	
	;CMP THE Y IF NOT EQUAL THEN LOOP ON ANOTHER ROD
	CMP R9, R12 
	SUBGE R11, R9, R12
	SUBLT R11, R12, R9
	CMP R11, #PLAYER_HEIGHT
	BGE LOOPANOTHER1
	
	MOV R12, #0
	SUB R12, R2, R5 ;START OF BAR
	ADD R11, R2, R5 ;END OF THE BAR
	
	;COMPARE BETWEEN THE (START, END) OF THE ROD AND X OF THE PLAYER
	MOV R4, #0xFFFF
	CMP R7, R12
	SUBLT R4, R12, R7
	CMP R4, #3
	BGT LOOPANOTHER1
	CMP R7, R11
	SUBGT R4, R7, R11
	CMP R4, #3
	BGT LOOPANOTHER1
	MOV R10, #1
	B CHECKFINISHED1
LOOPANOTHER1
	ADD R0, R0, #4
	ADD R1, R1, #4
	B CHECKLOOP1
	
CHECKFINISHED1
	POP {R0-R9,R11-R12, PC}
	
;#####################################################################
;#####################################################################	
;RETURN IN R10(0, 1)
CHECKCOLLISION2
	PUSH {R0-R9,R11, R12, LR} 
	;HOLDS THE CENTER OF THE RODS AND THE LENGTH IS CONSTANT 
	;THE HEIGHT(HALF) IS 4PX AND THE PLAYERS ARE 2PX ABOVE THE RODS
	LDR R0, =RODS
	LDR R1, =RODS_LENGTH 
	LDR R8, =PLAYER2
	LDR R8, [R8]
	LSR R7, R8, #16 ;X OF THE PLAYER
	MOV R12, #0x0000FFFF
	AND R9, R12, R8;Y OF THE PLAYER
	ADD R9, R9, #PLAYER_HEIGHT ;HALF THE PL LENGTH
	MOV R6, #0 ;TRAVERSING REG
	MOV R10, #0 ; Default
	LDR R2, [R1]
	CMP R2, #0
	BEQ CHECKFINISHED2
	CMP R2, #1
	BEQ CHECKFINISHED2
CHECKLOOP2
	CMP R6, #6
	BGE CHECKFINISHED2
	ADD R6, R6, #1

	LDR R4, [R0]
	LDR R5, [R1]	;THE  LENGTH
	MOV R12, #0XFFFF
	LSR R2, R4, #16  ;THE CENTER X
	AND R3, R4, R12  ;THE CENTER Y
	
	SUB R12,R3, #RODS_HEIGHT ;SUB THE HALF HEIGHT 
	SUB R12, #2 ;ADD THE EXTRA 2PX FOR THE PLAYER STANDING PADDING
	
	
	;CMP THE Y IF NOT EQUAL THEN LOOP ON ANOTHER ROD
	CMP R9, R12 
	SUBGE R11, R9, R12
	SUBLT R11, R12, R9
	CMP R11, #PLAYER_HEIGHT
	BGE LOOPANOTHER2
	
	MOV R12, #0
	SUB R12, R2, R5 ;START OF BAR
	ADD R11, R2, R5 ;END OF THE BAR
	
	;COMPARE BETWEEN THE (START, END) OF THE ROD AND X OF THE PLAYER
	MOV R4, #0xFFFF
	CMP R7, R12
	SUBLT R4, R12, R7
	CMP R4, #3
	BGT LOOPANOTHER2
	CMP R7, R11
	SUBGT R4, R7, R11
	CMP R4, #3
	BGT LOOPANOTHER2
	MOV R10, #1
	B CHECKFINISHED2
	
LOOPANOTHER2
	ADD R0, #4
	ADD R1, #4
	B CHECKLOOP2
	
CHECKFINISHED2
	POP {R0-R9,R11, R12, PC}
	LTORG
	
	;STATES (0 : Idle, 1 : Jump, 2 : Right, 3 : Left, 4 : Fall)
	
MOVE_PLAYER1
    PUSH {R0-R12, LR}
    ;R0 PLAYER, R1 PLAYER_STATE ADD.
    LDR R0, =PLAYER1
    LDR R1, =PLAYER1_STATE
    ;R4 PLAYER, R5 PLAYER_STATE 
    LDR R4, [R0]
    LDR R5, [R1]
    LSR R2, R4, #16        ;R2  HOLDS X
    LDR R12, =0X0000FFFF
    AND R3, R4, R12        ;R3 HOLDS Y
CHECKMOVE1
    CMP R5, #0
    BEQ CHOOSEFINISHED1
    
    BL CHECKCOLLISION1
    ;R10 FOR CHECK COLLISION RETURN
    ;IF NOT COLLIIDING DON'T MOVE, ELSE MOVE
    CMP R10, #1
    BEQ CHOOSEFINISHED1
	
    CMP R5, #1
	SUBEQ R6, R2, #PLAYER_WIDTH
	ADDEQ R8, R2, #PLAYER_WIDTH
	ADDEQ R7, R3, #PLAYER_HEIGHT
	SUBEQ R7, R7, #JUMP_STRENGTH
	ADDEQ R9, R7, #JUMP_STRENGTH
	MOVEQ R10, #CYAN
	BLEQ DrawRect
	SUBEQ R3, #JUMP_STRENGTH

    CMP R5, #2
    ADDEQ R2, #PLAYER_SPEED
    
    CMP R5, #3
    SUBEQ R2, #PLAYER_SPEED
    
    MOV R7, R2
    LSL R7, R7, #16
	MOV R2, #0xFFFF
	AND R3, R3, R2
    ORR R7, R7, R3
    STR R7, [R0]
    
CHOOSEFINISHED1
    POP {R0-R12, PC}
    
MOVE_PLAYER2
    PUSH {R0-R12, LR}
    ;R0 PLAYER, R1 PLAYER_STATE ADD.
    LDR R0, =PLAYER2
    LDR R1, =PLAYER2_STATE
    ;R4 PLAYER, R5 PLAYER_STATE 
     LDR R4, [R0]
    LDR R5, [R1]
    LSR R2, R4, #16        ;R2  HOLDS X
    LDR R12, =0X0000FFFF
    AND R3, R4, R12        ;R3 HOLDS Y
CHECKMOVE2
    CMP R5, #0
    BEQ CHOOSEFINISHED2
    
    BL CHECKCOLLISION2
    ;R10 FOR CHECK COLLISION RETURN
    ;IF NOT COLLIIDING DON'T MOVE, ELSE MOVE
    CMP R10, #1
    BEQ CHOOSEFINISHED2
    
    CMP R5, #1
	SUBEQ R6, R2, #PLAYER_WIDTH
	ADDEQ R8, R2, #PLAYER_WIDTH
	ADDEQ R7, R3, #PLAYER_HEIGHT
	SUBEQ R7, R7, #JUMP_STRENGTH
	ADDEQ R9, R7, #JUMP_STRENGTH
	MOVEQ R10, #CYAN
	BLEQ DrawRect
    SUBEQ R3, #JUMP_STRENGTH
    
    CMP R5, #2
    ADDEQ R2, #PLAYER_SPEED
    
    CMP R5, #3
    SUBEQ R2, #PLAYER_SPEED
    
    MOV R7, R2
    LSL R7, R7, #16
	MOV R2, #0xFFFF
	AND R3, R3, R2
    ORR R7, R7, R3
    STR R7, [R0]
    
CHOOSEFINISHED2
    POP {R0-R12, PC}
	LTORG
READ_INPUTS
	PUSH {R0-R12, LR}
	;STATES (0 : Idle, 1 : Jump, 2 : Right, 3 : Left, 4 : Fall)
	;(PB12 RIGHT1, PB13 LEFT1,PB3 JUMB1, PB6 SHOOT1, PB14 RIGHT2 , PB15 LEFT2, PB4 UP2, PB5 SHOOT2)
	
	;READ PLAYER 1 INPUTS
	LDR R0, =GPIOB_BASE + GPIO_IDR
	LDR R1, [R0] ; LOAD INPUTS IN R1
	
	LDR R0, =PLAYER1_STATE
	LDR R2, =0; ASSUME IDLE STATE FOR P1
	
	TST R1, #(1<<6);CHECK SHOOT P1
	;BLEQ SHOOTP1
	
	TST R1, #(1<<12);CHECK RIGHT P1
	MOVEQ R2, #2
	
	TST R1, #(1<<13);CHECK LEFT P1
	MOVEQ R2, #3
	
	TST R1, #(1<<3);CHECK  P1 JUMP
	MOVEQ R2, #1
	
	STR R2, [R0]
	
	;READ PLAYER 2 INPUTS
	LDR R0, =GPIOB_BASE + GPIO_IDR
	LDR R1, [R0] ; LOAD INPUTS IN R2
	
	LDR R0, =PLAYER2_STATE
	LDR R2, =0; ASSUME IDLE STATE FOR P2
	
	TST R1, #(1<<5);CHECK RIGHT P2
	;BLEQ SHOOTP2
	
	TST R1, #(1<<14);CHECK RIGHT P2
	MOVEQ R2, #2
	
	TST R1, #(1<<15);CHECK LEFT P2
	MOVEQ R2, #3
	
	TST R1, #(1<<4);CHECK  P2 JUMP
	MOVEQ R2, #1
	
	STR R2, [R0]
	
	POP {R0-R12, PC}
	
	LTORG
CheckFalling
	PUSH {R0-R12, LR}
	;CHECK FALLING FOR PLAYER 1
	LDR R0, =PLAYER1
	LDR R1, [R0]
	LSL R2, R1, #16
	LSR R2, R2, #16 ; GET Y IN R2
	LSR R1, R1, #16 ; GET X IN R1
	ADD R2, R2, #PLAYER_HEIGHT ;GET Y OF PLAYER1 LOWER EDGE IN R2
	
	MOV R6, #0 ;ASSUME PLAYER FALING UNTIL FIND HE IS ON TOP OF ANY ROD
	
	LDR R0, =RODS
	LDR R7, =RODS_LENGTH
	MOV R5, #0 ; OFFSET
CHECK_RODS_LOOP1
	LDR R3, [R0, R5]
	LSL R4, R3, #16
	LSR R4, R4, #16 ; GET Y OF THE ROD IN R4
	LSR R3, R3, #16 ; GET X OF ROD IN R3
	SUB R5, R1, R2
	CMP R5, #0
	BLT CHECK_RODS_LOOP1_NEXT
	CMP R5, #7
	BHI CHECK_RODS_LOOP1_NEXT
	LDR R8, [R7, R5] ; GET ROD HALF LENGTH IN R8
	SUB R9, R3, R8 ; GET START OF ROD IN R9
	CMP R1, R9
	BLT CHECK_RODS_LOOP1_NEXT
	ADD R9, R3, R8 ; GET END OF ROD IN R9
	CMP R1, R9
	BHI CHECK_RODS_LOOP1_NEXT
	MOV R6, #1 ;IF HE HAS Y GREATER THAN RODS THEN HE IS NOT FALLING
CHECK_RODS_LOOP1_NEXT
	CMP R6, #0
	BNE END_CHECK_FALLING1
	ADD R5, R5, #4
	CMP R5, #20
	BLE CHECK_RODS_LOOP1
	
END_CHECK_FALLING1	
	CMP R6, #0
	BNE CHECK_PLAYER2_FALLING
	
	SUB R2, R2, #PLAYER_HEIGHT
	SUB R7, R2, #PLAYER_HEIGHT
	SUB R6, R1, #PLAYER_WIDTH
	ADD R8, R1, #PLAYER_WIDTH
	ADD R9, R7, #GRAVITY
	MOV R10, #CYAN
	BL DrawRect
	
	LDR R0, =PLAYER1
	ADD R2, R2, #GRAVITY
	LSL R1, R1, #16
	ORR R1, R1, R2
	STR R1, [R0]
	
CHECK_PLAYER2_FALLING	
	;CHECK FALLING FOR PLAYER 2
	LDR R0, =PLAYER2
	LDR R1, [R0]
	LSL R2, R1, #16
	LSR R2, R2, #16 ; GET Y IN R2
	LSR R1, R1, #16 ; GET X IN R1
	ADD R2, R2, #PLAYER_HEIGHT ;GET Y OF PLAYER1 LOWER EDGE IN R2
	
	MOV R6, #0 ;ASSUME PLAYER FALING UNTIL FIND HE IS ON TOP OF ANY ROD
	
	LDR R0, =RODS
	LDR R7, =RODS_LENGTH
	MOV R5, #0 ; OFFSET
CHECK_RODS_LOOP2
	LDR R3, [R0, R5]
	LSL R4, R3, #16
	LSR R4, R4, #16 ; GET Y OF THE ROD IN R4
	LSR R3, R3, #16 ; GET X OF ROD IN R3
	SUB R5, R1, R2
	CMP R5, #0
	BLT CHECK_RODS_LOOP2_NEXT
	CMP R5, #7
	BHI CHECK_RODS_LOOP2_NEXT
	LDR R8, [R7, R5] ; GET ROD HALF LENGTH IN R8
	SUB R9, R3, R8 ; GET START OF ROD IN R9
	CMP R1, R9
	BLT CHECK_RODS_LOOP2_NEXT
	ADD R9, R3, R8 ; GET END OF ROD IN R9
	CMP R1, R9
	BHI CHECK_RODS_LOOP2_NEXT
	MOV R6, #1 ;IF HE HAS Y GREATER THAN RODS THEN HE IS NOT FALLING
CHECK_RODS_LOOP2_NEXT
	CMP R6, #0
	BNE END_CHECK_FALLING2
	ADD R5, R5, #4
	CMP R5, #20
	BLE CHECK_RODS_LOOP2

END_CHECK_FALLING2
	CMP R6, #0
	BNE END_FALLING_CHECK
	
	SUB R2, R2, #PLAYER_HEIGHT
	SUB R7, R2, #PLAYER_HEIGHT
	SUB R6, R1, #PLAYER_WIDTH
	ADD R8, R1, #PLAYER_WIDTH
	ADD R9, R7, #GRAVITY
	MOV R10, #CYAN
	BL DrawRect
	
	LDR R0, =PLAYER2
	ADD R2, R2, #GRAVITY
	LSL R1, R1, #16
	ORR R1, R1, R2
	STR R1, [R0]
	
END_FALLING_CHECK
	POP {R0-R12, PC}
	LTORG
MOVE_PLAYERS
	PUSH {R0-R12, LR}

	POP {R0-R12, PC}
	LTORG
MOVE_BULLETS
    PUSH {R0-R12, LR}
    ;MOVE BULLETS OF PLAYER 1
    LDR R0, =BULLETS1
    LDR R5, =0; OFFSET
LOOP_MOVEBULLETS1
    LDR R1, [R0, R5]
    CMP R1, #0xFFFFFFFF
    BEQ GO_NEXTMOVE_LOOP1
    LSR R3, R1, #16 ; GET BULLET X IN R3
    LSL R1, R1, #16
    LSR R1, R1, #16 ; GET BULLET Y IN R1
    
    ADD R8, R3, #4
    SUB R6, R8, #BULLET_SPEED
    SUB R7, R1, #1
    ADD R9, R7, #2
    MOV R10, #CYAN
    BL DrawRect
    
    SUB R3, R3, #BULLET_SPEED ; MOVE BULLETS TO THE LEFT FOR P1
    LSL R3, R3, #16
    ORR R1, R1, R3 ; ASSEMBLE BACK NEW X WITH THE CONSTANT Y OF THE BULLET
    STR R1, [R0, R5]
    ;DRAW BULLET AT NEW LOCATION
    MOV R10, #YELLOW
    BL DRAW_BULLET
    
GO_NEXTMOVE_LOOP1
    ADD R5, R5, #4
    CMP R5, #76
    BLE LOOP_MOVEBULLETS1
    
    ;MOVE BULLETS OF PLAYER 2
    LDR R0, =BULLETS2
    LDR R5, =0; OFFSET
LOOP_MOVEBULLETS2
    LDR R1, [R0, R5]
    CMP R1, #0xFFFFFFFF
    BEQ GO_NEXTMOVE_LOOP2
    LSR R3, R1, #16 ; GET BULLET X IN R3
    LSL R1, R1, #16
    LSR R1, R1, #16 ; NOW R1 HAS ONLY Y IN RIGHT MOST 4 BYTES
    
    SUB R6, R3, #4
    ADD R8, R6, #BULLET_SPEED
    SUB R7, R1, #1
    ADD R9, R7, #2
    MOV R10, #CYAN
    BL DrawRect
    
    ADD R3, R3, #BULLET_SPEED ; MOVE BULLETS TO THE RIGHT FOR P2
    LSL R3, R3, #16
    ORR R1, R1, R3 ; ASSEMBLE BACK NEW X WITH THE CONSTANT Y OF THE BULLET
    STR R1, [R0, R5]
    ;DRAW BULLET AT NEW LOCATION
    MOV R10, #YELLOW
    BL DRAW_BULLET
GO_NEXTMOVE_LOOP2
    ADD R5, R5, #4
    CMP R5, #76
    BLE LOOP_MOVEBULLETS2
    
    POP {R0-R12, PC}
	LTORG
CHECK_BULLET_COLLISION
	PUSH{R0-R12, LR}
	;CHECK BULLET COLLISION FOR PLAYER 1
	LDR R0, =PLAYER1
	LDR R1, [R0] ; PUT PLAYER1 COORDINATES IN R1
	LSL R2, R1, #16
	LSR R2, R2, #16 ; P1 Y IN R2
	ADD R7, R2, #20 ; P1 LOWER Y
	SUB R8, R2, #20 ; P1 HIGHER Y
	LSR R1, R1, #16 ; P1 X IN R1
	
	LDR R0, =BULLETS2 ; LOAD BULLETS SHOT FROM PLAYER 2 HITTING PLAYER 1
	LDR R5, =0 ; OFFSET
LOOP_COLLISIONBULLETS1
	LDR R3, [R0, R5] ; PUT BULLET COORDINATES IN R3
	CMP R3, #0xFFFFFFFF ; IF BULLETS DOESN'T EXIST CHECK NEXT ONE
	BEQ GO_NEXTCOLLISIONLOOP1
	LSL R4, R3, #16 ; 
	LSR R4, R4, #16 ; BUT BULLET Y IN R4
	LSR R3, R3, #16 ; BUT BULLET X IN R3
	
	CMP R3, R1
	BLO GO_NEXTCOLLISIONLOOP1
	MOV R6, #0
	CMP R4, R8 ; COMPARE WITH THE UPPER PART THE BULLET Y MYST BE LOWER OR EQUAL IT
	ADDLS R6, R6, #1
	CMP R4, R7 ; COMPARE WITH THE LOWER PART THE BULLET Y MUST BE GREATER OR EQUAL IT
	ADDHS R6, R6, #1
	CMP R6, #2 ; IF BOTH CONDITIONS OCCURED DECREMENT P1 HEALTH AND ERASE THE BULLET
	;BLEQ PLAYER1_HIT ; R2 HAS THE BULLET OFFSET IT WILL BE PASSES TO THE FUNCTION AND IT SHOULD ERASE IT
GO_NEXTCOLLISIONLOOP1
	ADD R5, R5, #4
	CMP R5, #76
	BLE LOOP_COLLISIONBULLETS1	
	
	
	;CHECK BULLET COLLISION FOR PLAYER 2
	LDR R0, =PLAYER2
	LDR R1, [R0] ; PUT PLAYER1 COORDINATES IN R1
	LSL R2, R1, #16
	LSR R2, R2, #16 ; P2 Y IN R2
	ADD R7, R2, #20 ; P2 LOWER Y
	SUB R8, R2, #20 ; P2 HIGHER Y
	LSR R1, R1, #16 ; P1 X IN R1
	
	LDR R0, =BULLETS1 ; LOAD BULLETS SHOT FROM PLAYER 1 HITTING PLAYER 2
	LDR R5, =0 ; OFFSET
LOOP_COLLISIONBULLETS2
	LDR R3, [R0, R5] ; PUT BULLET COORDINATES IN R3
	CMP R3, #0xFFFFFFFF ; IF BULLETS DOESN'T EXIST CHECK NEXT ONE
	BEQ GO_NEXTCOLLISIONLOOP2
	LSL R4, R3, #16 ; 
	LSR R4, R4, #16 ; BUT BULLET Y IN R4
	LSR R3, R3, #16 ; BUT BULLET X IN R3
	
	CMP R3, R1
	BLO GO_NEXTCOLLISIONLOOP2
	MOV R6, #0
	CMP R4, R8 ; COMPARE WITH THE UPPER PART THE BULLET Y MYST BE LOWER OR EQUAL IT
	ADDLS R6, R6, #1
	CMP R4, R7 ; COMPARE WITH THE LOWER PART THE BULLET Y MUST BE GREATER OR EQUAL IT
	ADDHS R6, R6, #1
	CMP R6, #2 ; IF BOTH CONDITIONS OCCURED DECREMENT P1 HEALTH AND ERASE THE BULLET
	;BLEQ PLAYER2_HIT ; R2 HAS THE BULLET OFFSET IT WILL BE PASSES TO THE FUNCTION AND IT SHOULD ERASE IT
GO_NEXTCOLLISIONLOOP2
	ADD R5, R5, #4
	CMP R5, #76
	BLE LOOP_COLLISIONBULLETS2
	
	POP{R0-R12, PC}
LTORG



DRAW_BULLET
   PUSH{R0-R12,LR}
	;OFFSET IN R5, BASE IN R0
    LDR R1,[R0,R5]  ;XXXXYYYY

    LSR R6,R1,#16
    SUB R6,R6,#4

    MOV R4,#0x0000FFFF
    AND R7,R1,R4  ;Y
    SUB R7,R7,#1

    ADD R8,R6,#8
    ADD R9,R7,#2

    BL DrawRect
	POP{R0-R12,PC}

REMOVE_BULLET
	PUSH {R0-R12, LR}
	;R5 CONTAINS OFFSET R0 CONTAINS BASE
	;REMOVE BULLET BY FILLING WITH THE BACKGROUND COLOUR
	MOV R10, #CYAN
	BL DRAW_BULLET
	;REMOVE BULLET FROM MEMORY
	MOV R1, #0xFFFFFFFF
	STR R1, [R0, R5]
	
	POP {R0-R12, PC}
	
CHECK_BULLETS_END
	PUSH{R0-R12, LR}
	;CHECK END FOR BULLETS1
	LDR R0, =BULLETS1
	LDR R5, =0; OFFSET
CHECK_END_LOOP1
	LDR R1, [R0, R5]
	CMP R1, #0xFFFFFFFF
	BEQ SKIP_ENDLOOP1
	LSR R1, R1, #16 ; R1=X
	SUB R1, R1, #16
	CMP R1, #BORDERS
	BHI SKIP_ENDLOOP1
	BL REMOVE_BULLET
SKIP_ENDLOOP1
	ADD R5, R5, #4
	CMP R5, #76
	BLE CHECK_END_LOOP1
	
	;CHECK END FOR BULLETS2
	LDR R0, =BULLETS2
	LDR R5, =0; OFFSET
CHECK_END_LOOP2
	LDR R1, [R0, R5]
	CMP R1, #0xFFFFFFFF
	BEQ SKIP_ENDLOOP2
	LSR R1, R1, #16 ; R1=X
	ADD R1, R1, #BORDERS
	MOV R7, #480
	SUB R7, R7, #BORDERS
	CMP R1, R7
	BLO SKIP_ENDLOOP2
	BL REMOVE_BULLET
SKIP_ENDLOOP2
	ADD R5, R5, #4
	CMP R5, #76
	BLE CHECK_END_LOOP2
	POP {R0-R12, PC}
	LTORG
UPDATE_HEALTH ; IF R5 = 0xFFFFFFFF it Draws Above Existing Otherwise Clears Then Draw
	PUSH {R0-R12, LR}
	LDR R0, =PLAYER1_HEALTH
	LDR R0, [R0]
	MOV R11, #390
	MOV R12, #5
	MOV R10, #CYAN
	BL SCORE_INIT
	MOV R6, #0xFFFFFFFF
	CMP R5, R6
	BLNE CLEAR_COLOR
	BL SET_SCORE
	BL COLOR_RED
	LDR R0, =PLAYER2_HEALTH
	LDR R0, [R0]
	MOV R11, #10
	MOV R12, #5
	MOV R10, #CYAN
	BL SCORE_INIT
	MOV R6, #0xFFFFFFFF
	CMP R5, R6
	BLNE CLEAR_COLOR
	BL SET_SCORE
	BL COLOR_RED
	POP {R0-R12, PC}
	LTORG
UPDATE_SCORE ; IF R5 = 0xFFFFFFFF it Draws Above Existing Otherwise Clears Then Draw
	PUSH {R0-R12, LR}
	LDR R0, =PLAYER1_SCORE
	LDR R0, [R0]
	MOV R11, #320
	MOV R12, #5
	MOV R10, #CYAN
	BL SCORE_INIT
	MOV R6, #0xFFFFFFFF
	CMP R5, R6
	BLNE CLEAR_COLOR
	BL SET_SCORE
	BL COLOR_GREEN
	LDR R0, =PLAYER2_SCORE
	LDR R0, [R0]
	MOV R11, #160
	MOV R12, #5
	MOV R10, #CYAN
	BL SCORE_INIT
	MOV R6, #0xFFFFFFFF
	CMP R5, R6
	BLNE CLEAR_COLOR
	BL SET_SCORE
	BL COLOR_GREEN
	POP {R0-R12, PC}
	LTORG
SHOOTONE
	PUSH{R0-R12, LR}
	LDR R0, =BULLETS1
	MOV R5, #20
SHOOTONELOOP
	CMP R5, #0
	BLE SHOOTONEFINISHED
	SUB R5, R5, #1
	LDR R1, [R0]
	MOV R2, #0xFFFFFFFF
	CMP R1, R2
	BNE SHOOTONECONTINUE
	LDR R2, =PLAYER1
	LDR R2, [R2]
	LSR R3, R2, #16 ; X
	LSL R4, R2, #16
	LSR R4, R4, #16 ; Y
	SUB R3, R3, #PLAYER_WIDTH
	SUB R3, R3, #6 ; Half of Width of Bullet
	LSL R3, R3, #16
	ORR R3, R3, R4 ; R3 = 0xXXXXYYYYY
	STR R3, [R0]	
	MOV R6, #20
	SUB R5, R6, R5 ; R5 = Index from Start 
	ADD R5, R5, #1
	MOV R10, #WHITE
	LDR R0, =BULLETS1
	BL DRAW_BULLET
	B SHOOTONEFINISHED

SHOOTONECONTINUE
	LDR R1, [R0], #4
	B SHOOTONELOOP
SHOOTONEFINISHED
	POP{R0,R12, PC}

SHOOTTWO
	PUSH{R0-R12, LR}
	LDR R0, =BULLETS2
	MOV R5, #20
SHOOTTWOLOOP
	CMP R5, #0
	BLE SHOOTTWOFINISHED
	SUB R5, R5, #1
	LDR R1, [R0]
	MOV R2, #0xFFFFFFFF
	CMP R1, R2
	BNE SHOOTTWOCONTINUE
	LDR R2, =PLAYER2
	LDR R2, [R2]
	LSR R3, R2, #16 ; X
	LSL R4, R2, #16
	LSR R4, R4, #16 ; Y
	ADD R3, R3, #PLAYER_WIDTH
	ADD R3, R3, #6 ; Half of Width of Bullet
	LSL R3, R3, #16
	ORR R3, R3, R4 ; R3 = 0xXXXXYYYYY
	STR R3, [R0]	
	MOV R6, #20
	SUB R5, R6, R5 ; R5 = Index from Start 
	ADD R5, R5, #1
	MOV R10, #WHITE
	LDR R0, =BULLETS2
	BL DRAW_BULLET
	B SHOOTTWOFINISHED

SHOOTTWOCONTINUE
	LDR R1, [R0], #4
	B SHOOTONELOOP
SHOOTTWOFINISHED
	POP{R0,R12, PC}